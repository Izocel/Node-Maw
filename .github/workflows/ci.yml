name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  release:
    types: [ published ]

env:
  NODE_OPTIONS: --max-old-space-size=4096

jobs:
  # Lint and Type Check
  lint:
    name: Lint & Type Check
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Type check
      run: npm run type-check

    - name: Check package configuration
      run: |
        npm run pack:test
        npm run publish:dry

  # Build and Test Matrix
  test:
    name: Build & Test
    runs-on: ${{ matrix.os }}
    needs: lint

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        node-version: [20.x, 22.x]

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Build project
      run: npm run build

    - name: Verify build output
      run: |
        test -f dist/index.js || exit 1
        test -f dist/index.d.ts || exit 1
        ls -la dist/
      shell: bash

    - name: Run tests
      run: npm test

    - name: Verify package can be imported
      run: node -e "const pkg = require('./dist/index.js'); console.log('Package imported successfully');"

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      if: matrix.node-version == '20.x' && matrix.os == 'ubuntu-latest'
      with:
        name: dist-build
        path: |
          dist/
          package.json
          README.md
        retention-days: 7

  # Security Audit
  security:
    name: Security Audit
    runs-on: ubuntu-latest
    needs: lint

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run security audit
      run: npm audit --audit-level=moderate || true

    - name: Check for known vulnerabilities
      run: npx audit-ci --moderate || echo "Audit check completed with warnings"

  # Publish to NPM (only on release)
  publish:
    name: Publish to NPM
    runs-on: ubuntu-latest
    needs: [test, security]
    if: github.event_name == 'release' && github.event.action == 'published'

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        registry-url: 'https://registry.npmjs.org'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Build project
      run: npm run build

    - name: Publish to NPM
      run: npm publish
      env:
        NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

    - name: Create GitHub release notes
      uses: actions/github-script@v7
      with:
        script: |
          const version = require('./package.json').version;
          github.rest.repos.updateRelease({
            owner: context.repo.owner,
            repo: context.repo.repo,
            release_id: context.payload.release.id,
            body: `🚀 Published version ${version} to NPM\n\nInstall with: \`npm install node-maw@${version}\``
          });

  # Dependency Update Check
  dependency-review:
    name: Dependency Review
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Dependency Review
      uses: actions/dependency-review-action@v4
      with:
        fail-on-severity: moderate

  # Package Size Check
  size-check:
    name: Package Size Check
    runs-on: ubuntu-latest
    needs: test

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Build project
      run: npm run build

    - name: Check package size
      run: |
        PACKAGE_SIZE=$(npm pack --dry-run 2>&1 | grep "unpacked size" | awk '{print $4$5}')
        echo "Package size: $PACKAGE_SIZE"
        
        # Fail if package is larger than 50KB
        SIZE_BYTES=$(npm pack --dry-run --json | jq '.[0].size')
        if [ $SIZE_BYTES -gt 51200 ]; then
          echo "❌ Package size $PACKAGE_SIZE is too large (>50KB)"
          exit 1
        else
          echo "✅ Package size $PACKAGE_SIZE is acceptable"
        fi